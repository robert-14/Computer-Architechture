$date
	Thu Dec 28 20:21:16 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var wire 256 ! mem_cpu_data [255:0] $end
$var wire 1 " mem_cpu_ack $end
$var wire 1 # cpu_mem_write $end
$var wire 1 $ cpu_mem_enable $end
$var wire 256 % cpu_mem_data [255:0] $end
$var wire 32 & cpu_mem_addr [31:0] $end
$var reg 1 ' Clk $end
$var reg 1 ( Reset $end
$var reg 1 ) Start $end
$var reg 27 * address [26:0] $end
$var reg 1 + flag $end
$var reg 5 , index [4:0] $end
$var reg 24 - tag [23:0] $end
$var integer 32 . counter [31:0] $end
$var integer 32 / i [31:0] $end
$var integer 32 0 outfile [31:0] $end
$var integer 32 1 outfile2 [31:0] $end
$scope module CPU $end
$var wire 1 2 IF_Flush $end
$var wire 1 3 branch $end
$var wire 1 ' clk_i $end
$var wire 1 ( rst_i $end
$var wire 1 ) start_i $end
$var wire 1 4 stall_o $end
$var wire 32 5 pc_add [31:0] $end
$var wire 32 6 pc_ID [31:0] $end
$var wire 1 # mem_write_o $end
$var wire 1 $ mem_enable_o $end
$var wire 256 7 mem_data_o [255:0] $end
$var wire 256 8 mem_data_i [255:0] $end
$var wire 32 9 mem_addr_o [31:0] $end
$var wire 1 " mem_ack_i $end
$var wire 32 : instruction_extended [31:0] $end
$var wire 32 ; inst_addr [31:0] $end
$var wire 32 < inst [31:0] $end
$var wire 32 = immidiate_o [31:0] $end
$var wire 1 > eq $end
$var wire 32 ? addr_i [31:0] $end
$var wire 5 @ RegistersRT_o [4:0] $end
$var wire 32 A RT_data [31:0] $end
$var wire 32 B RS_data [31:0] $end
$var wire 1 C MemRead_o $end
$var wire 5 D MW_RegistersRD_o [4:0] $end
$var wire 1 E MW_RegWrite_o $end
$var wire 32 F MUX7_o [31:0] $end
$var wire 32 G MUX5_o [31:0] $end
$var wire 32 H MUX1_o [31:0] $end
$var wire 1 I Jump $end
$var wire 5 J EM_RegistersRD_o [4:0] $end
$var wire 1 K EM_RegWrite_o $end
$var wire 1 L Branch_o $end
$scope module ALU $end
$var wire 32 M data2_i [31:0] $end
$var wire 32 N data1_i [31:0] $end
$var wire 3 O ALUCtrl_i [2:0] $end
$var reg 1 P Zero_o $end
$var reg 32 Q data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 6 R funct_i [5:0] $end
$var wire 2 S ALUOp_i [1:0] $end
$var reg 3 T ALUCtrl_o [2:0] $end
$upscope $end
$scope module Add_ID $end
$var wire 32 U data_o [31:0] $end
$var wire 32 V data2_i [31:0] $end
$var wire 32 W data1_i [31:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 X data2_i [31:0] $end
$var wire 32 Y data_o [31:0] $end
$var wire 32 Z data1_i [31:0] $end
$upscope $end
$scope module Control $end
$var wire 6 [ Op_i [5:0] $end
$var wire 1 \ Hazard_i $end
$var reg 2 ] ALUOp_o [1:0] $end
$var reg 1 ^ ALUSrc_o $end
$var reg 1 L Branch_o $end
$var reg 1 I Jump_o $end
$var reg 1 _ MemRead_o $end
$var reg 1 ` MemWrite_o $end
$var reg 1 a MemtoReg_o $end
$var reg 1 b RegDst_o $end
$var reg 1 c RegWrite_o $end
$upscope $end
$scope module EX_MEM $end
$var wire 32 d ALUout_i [31:0] $end
$var wire 32 e JumpAddr_i [31:0] $end
$var wire 32 f PC_i [31:0] $end
$var wire 1 g RegRead_i $end
$var wire 1 h Zero_i $end
$var wire 1 ' clk_i $end
$var wire 1 4 stall_i $end
$var wire 32 i regB_i [31:0] $end
$var wire 5 j RegistersRD_i [4:0] $end
$var wire 1 k RegWrite_i $end
$var wire 1 l MemtoReg_i $end
$var wire 1 m MemWrite_i $end
$var wire 1 C MemRead_i $end
$var reg 32 n ALUout_o [31:0] $end
$var reg 32 o JumpAddr_o [31:0] $end
$var reg 1 p MemRead_o $end
$var reg 1 q MemWrite_o $end
$var reg 1 r MemtoReg_o $end
$var reg 32 s PC_o [31:0] $end
$var reg 1 t RegRead_o $end
$var reg 1 K RegWrite_o $end
$var reg 5 u RegistersRD_o [4:0] $end
$var reg 1 v Zero_o $end
$var reg 32 w regB_o [31:0] $end
$upscope $end
$scope module Equal $end
$var wire 1 > data_o $end
$var wire 32 x data2_i [31:0] $end
$var wire 32 y data1_i [31:0] $end
$upscope $end
$scope module Forward $end
$var wire 1 z EXMEMMemtoReg_i $end
$var wire 5 { EXMEMRegRD_i [4:0] $end
$var wire 1 K EXMEMRegWrite_i $end
$var wire 1 E MEMWBRegWrite_i $end
$var wire 5 | MEMWBRegRD_i [4:0] $end
$var wire 5 } IDEXRegRT_i [4:0] $end
$var wire 5 ~ IDEXRegRS_i [4:0] $end
$var reg 2 !" ForwardA_o [1:0] $end
$var reg 2 "" ForwardB_o [1:0] $end
$upscope $end
$scope module Hazard_Detection $end
$var wire 5 #" IFIDRegRS_i [4:0] $end
$var wire 5 $" IFIDRegRT_i [4:0] $end
$var wire 5 %" IDEXRegRT_i [4:0] $end
$var wire 1 C IDEXMemRead_i $end
$var reg 1 \ Hazard_o $end
$var reg 1 &" IFID_o $end
$var reg 1 '" PCWrite_o $end
$upscope $end
$scope module ID_EX $end
$var wire 2 (" ALUOp_i [1:0] $end
$var wire 1 ^ ALUSrc_i $end
$var wire 1 _ MemRead_i $end
$var wire 1 ` MemWrite_i $end
$var wire 1 a MemtoReg_i $end
$var wire 1 b RegDst_i $end
$var wire 1 c RegWrite_i $end
$var wire 5 )" RegistersRD_i [4:0] $end
$var wire 5 *" RegistersRS_i [4:0] $end
$var wire 5 +" RegistersRT_i [4:0] $end
$var wire 1 ' clk_i $end
$var wire 1 4 stall_i $end
$var wire 32 ," regB_i [31:0] $end
$var wire 32 -" regA_i [31:0] $end
$var wire 32 ." immidiate_i [31:0] $end
$var wire 32 /" PC_i [31:0] $end
$var reg 2 0" ALUOp_o [1:0] $end
$var reg 1 1" ALUSrc_o $end
$var reg 1 C MemRead_o $end
$var reg 1 m MemWrite_o $end
$var reg 1 l MemtoReg_o $end
$var reg 32 2" PC_o [31:0] $end
$var reg 1 3" RegDst_o $end
$var reg 1 k RegWrite_o $end
$var reg 5 4" RegistersRD_o [4:0] $end
$var reg 5 5" RegistersRS_o [4:0] $end
$var reg 5 6" RegistersRT_o [4:0] $end
$var reg 32 7" immidiate_o [31:0] $end
$var reg 32 8" regA_o [31:0] $end
$var reg 32 9" regB_o [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 ' clk_i $end
$var wire 1 2 flush_i $end
$var wire 32 :" pc_i [31:0] $end
$var wire 1 &" write_i $end
$var wire 1 4 stall_i $end
$var wire 32 ;" inst_i [31:0] $end
$var reg 32 <" inst_o [31:0] $end
$var reg 32 =" pc_o [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 >" instr_o [31:0] $end
$var wire 32 ?" addr_i [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 32 @" ALUout_i [31:0] $end
$var wire 1 r MemtoReg_i $end
$var wire 32 A" PC_i [31:0] $end
$var wire 32 B" PC_o [31:0] $end
$var wire 1 K RegWrite_i $end
$var wire 5 C" RegistersRD_i [4:0] $end
$var wire 1 ' clk_i $end
$var wire 1 4 stall_i $end
$var wire 32 D" MemoryDataRead_i [31:0] $end
$var reg 32 E" ALUout_o [31:0] $end
$var reg 32 F" MemoryDataRead_o [31:0] $end
$var reg 1 G" MemtoReg_o $end
$var reg 1 E RegWrite_o $end
$var reg 5 H" RegistersRD_o [4:0] $end
$upscope $end
$scope module MUX1 $end
$var wire 32 I" data1_i [31:0] $end
$var wire 32 J" data2_i [31:0] $end
$var wire 1 3 select_i $end
$var reg 32 K" data_o [31:0] $end
$upscope $end
$scope module MUX2 $end
$var wire 32 L" data1_i [31:0] $end
$var wire 1 I select_i $end
$var wire 32 M" data2_i [31:0] $end
$var reg 32 N" data_o [31:0] $end
$upscope $end
$scope module MUX3 $end
$var wire 5 O" data1_i [4:0] $end
$var wire 5 P" data2_i [4:0] $end
$var wire 1 3" select_i $end
$var reg 5 Q" data_o [4:0] $end
$upscope $end
$scope module MUX4 $end
$var wire 32 R" data2_i [31:0] $end
$var wire 1 1" select_i $end
$var wire 32 S" data1_i [31:0] $end
$var reg 32 T" data_o [31:0] $end
$upscope $end
$scope module MUX5 $end
$var wire 32 U" data1_i [31:0] $end
$var wire 32 V" data2_i [31:0] $end
$var wire 1 G" select_i $end
$var reg 32 W" data_o [31:0] $end
$upscope $end
$scope module MUX6 $end
$var wire 32 X" data1_i [31:0] $end
$var wire 32 Y" data2_i [31:0] $end
$var wire 32 Z" data3_i [31:0] $end
$var wire 2 [" select_i [1:0] $end
$var reg 32 \" data_o [31:0] $end
$upscope $end
$scope module MUX7 $end
$var wire 32 ]" data1_i [31:0] $end
$var wire 32 ^" data2_i [31:0] $end
$var wire 32 _" data3_i [31:0] $end
$var wire 2 `" select_i [1:0] $end
$var reg 32 a" data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ' clk_i $end
$var wire 1 b" pcEnable_i $end
$var wire 32 c" pc_i [31:0] $end
$var wire 1 ( rst_i $end
$var wire 1 ) start_i $end
$var wire 1 '" write_i $end
$var wire 1 4 stall_i $end
$var reg 32 d" pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 e" RDaddr_i [4:0] $end
$var wire 32 f" RDdata_i [31:0] $end
$var wire 5 g" RSaddr_i [4:0] $end
$var wire 5 h" RTaddr_i [4:0] $end
$var wire 1 E RegWrite_i $end
$var wire 1 ' clk_i $end
$var wire 32 i" RTdata_o [31:0] $end
$var wire 32 j" RSdata_o [31:0] $end
$upscope $end
$scope module Shift26 $end
$var wire 26 k" data_i [25:0] $end
$var wire 28 l" data_o [27:0] $end
$upscope $end
$scope module Shift32 $end
$var wire 32 m" data_o [31:0] $end
$var wire 32 n" data_i [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 o" data_i [15:0] $end
$var wire 32 p" data_o [31:0] $end
$upscope $end
$scope module dcache $end
$var wire 1 q" cache_dirty $end
$var wire 1 r" cache_sram_enable $end
$var wire 5 s" cache_sram_index [4:0] $end
$var wire 1 t" cache_sram_write $end
$var wire 1 ' clk_i $end
$var wire 256 u" mem_data_o [255:0] $end
$var wire 1 $ mem_enable_o $end
$var wire 1 # mem_write_o $end
$var wire 1 p p1_MemRead_i $end
$var wire 1 q p1_MemWrite_i $end
$var wire 32 v" p1_addr_i [31:0] $end
$var wire 32 w" p1_data_i [31:0] $end
$var wire 32 x" p1_data_o [31:0] $end
$var wire 1 y" p1_req $end
$var wire 1 4 p1_stall_o $end
$var wire 256 z" r_hit_data [255:0] $end
$var wire 1 ( rst_i $end
$var wire 1 {" write_hit $end
$var wire 1 |" sram_valid $end
$var wire 22 }" sram_tag [21:0] $end
$var wire 1 ~" sram_dirty $end
$var wire 24 !# sram_cache_tag [23:0] $end
$var wire 256 "# sram_cache_data [255:0] $end
$var wire 22 ## p1_tag [21:0] $end
$var wire 5 $# p1_offset [4:0] $end
$var wire 5 %# p1_index [4:0] $end
$var wire 256 &# mem_data_i [255:0] $end
$var wire 32 '# mem_addr_o [31:0] $end
$var wire 1 " mem_ack_i $end
$var wire 1 (# hit $end
$var wire 24 )# cache_sram_tag [23:0] $end
$var wire 256 *# cache_sram_data [255:0] $end
$var wire 32 +# actual_offset [31:0] $end
$var reg 256 ,# bin_value [255:0] $end
$var reg 256 -# bin_window [255:0] $end
$var reg 1 .# cache_we $end
$var reg 1 /# mem_enable $end
$var reg 1 0# mem_write $end
$var reg 32 1# p1_data [31:0] $end
$var reg 3 2# state [2:0] $end
$var reg 256 3# temp_read [255:0] $end
$var reg 256 4# temp_write [255:0] $end
$var reg 256 5# w_hit_data [255:0] $end
$var reg 1 6# write_back $end
$scope module dcache_data_sram $end
$var wire 5 7# addr_i [4:0] $end
$var wire 1 ' clk_i $end
$var wire 256 8# data_i [255:0] $end
$var wire 1 r" enable_i $end
$var wire 1 t" write_i $end
$var wire 256 9# data_o [255:0] $end
$upscope $end
$scope module dcache_tag_sram $end
$var wire 5 :# addr_i [4:0] $end
$var wire 1 ' clk_i $end
$var wire 24 ;# data_i [23:0] $end
$var wire 1 r" enable_i $end
$var wire 1 t" write_i $end
$var wire 24 <# data_o [23:0] $end
$upscope $end
$upscope $end
$scope module jump $end
$var wire 28 =# data1_i [27:0] $end
$var wire 32 ># data2_i [31:0] $end
$var wire 32 ?# data_o [31:0] $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 # MemWrite_i $end
$var wire 1 @# ack $end
$var wire 1 " ack_o $end
$var wire 32 A# addr_i [31:0] $end
$var wire 1 ' clk_i $end
$var wire 256 B# data_i [255:0] $end
$var wire 256 C# data_o [255:0] $end
$var wire 1 $ enable_i $end
$var wire 1 ( rst_i $end
$var wire 27 D# addr [26:0] $end
$var reg 4 E# count [3:0] $end
$var reg 256 F# data [255:0] $end
$var reg 2 G# state [1:0] $end
$var reg 1 H# write_reg $end
$upscope $end
$upscope $end
$enddefinitions $end
#12
$dumpvars
xH#
bx G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx00000 A#
x@#
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 ?#
b100 >#
bx00 =#
bx <#
b1xxxxxxxxxxxxxxxxxxxxxxx ;#
bx :#
bx 9#
bx 8#
bx 7#
06#
bx 5#
bx 4#
bx 3#
b0 2#
bx 1#
00#
0/#
0.#
bx -#
bx ,#
b0xxxxx000 +#
bx *#
b1xxxxxxxxxxxxxxxxxxxxxxx )#
x(#
bx00000 '#
bx &#
bx %#
bx $#
bx ##
bx "#
bx !#
x~"
bx }"
x|"
x{"
bx z"
xy"
bx x"
bx w"
bx v"
bx u"
xt"
bx s"
xr"
xq"
bx p"
bx o"
bx n"
bx00 m"
bx00 l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
b0 d"
b100 c"
zb"
bx a"
b0 `"
bx _"
bx ^"
bx ]"
bx \"
b0 ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
b100 N"
b0xxxxxxxxxxxxxxxxxxxxxxxxxx00 M"
b100 L"
b100 K"
bx J"
b100 I"
bx H"
xG"
bx F"
bx E"
bx D"
bx C"
bz B"
bz A"
bx @"
b0 ?"
b100000000010000000000000000000 >"
bx ="
bx <"
b100000000010000000000000000000 ;"
b100 :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
x3"
bx 2"
x1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
x'"
x&"
bx %"
bx $"
bx #"
b0 ""
b0 !"
bx ~
bx }
bx |
bx {
zz
bx y
bx x
bx w
xv
bx u
xt
bx s
xr
xq
xp
bx o
bx n
xm
xl
xk
bx j
bx i
zh
zg
bz f
bz e
bx d
xc
xb
xa
x`
x_
x^
bx ]
x\
bx [
b0 Z
b100 Y
b100 X
bx00 W
bx V
bx U
bx T
bx S
bx R
bx Q
xP
bx O
bx N
bx M
xL
xK
bx J
xI
b100 H
bx G
bx F
xE
bx D
xC
bx B
bx A
bx @
bx ?
x>
bx =
bx <
b0 ;
bx :
bx00000 9
bx 8
bx 7
bx 6
b100 5
x4
x3
x2
b101 1
b11 0
b100000 /
b1 .
bx -
bx ,
x+
bx *
1)
1(
0'
bx00000 &
bx %
0$
0#
x"
bx !
$end
#25
0"
0@#
zt
bz o
bz s
zv
b0 E#
0H#
b10 .
1'
#50
0'
#75
b11 .
1'
#100
0'
#125
b100 .
1'
#150
0'
#175
b101 .
1'
#200
0'
#225
b110 .
1'
#250
0'
#275
b111 .
1'
#300
0'
#325
b1000 .
1'
#350
0'
#375
b1001 .
1'
#400
0'
#425
b1010 .
1'
#450
0'
#475
b1011 .
1'
#500
0'
#525
b1100 .
1'
#550
0'
#575
b1101 .
1'
#600
0'
#625
b1110 .
1'
#650
0'
#675
b1111 .
1'
#700
0'
#725
b10000 .
1'
#750
0'
#775
b10001 .
1'
#800
0'
#825
b10010 .
1'
#850
0'
#875
b10011 .
1'
#900
0'
#925
b10100 .
1'
#950
0'
#975
b10101 .
1'
#1000
0'
#1025
b10110 .
1'
#1050
0'
#1075
b10111 .
1'
#1100
0'
#1125
b11000 .
1'
#1150
0'
#1175
b11001 .
1'
#1200
0'
#1225
b11010 .
1'
#1250
0'
#1275
b11011 .
1'
#1300
0'
#1325
b11100 .
1'
#1350
0'
#1375
b11101 .
1'
#1400
0'
#1425
b11110 .
1'
#1450
0'
#1475
b11111 .
1'
#1500
0'
#1525
b100000 .
1'
#1550
0'
#1575
b100001 .
1'
#1600
0'
#1625
b100010 .
1'
#1650
0'
#1675
b100011 .
1'
#1700
0'
#1725
b100100 .
1'
#1750
0'
#1775
b100101 .
1'
#1800
0'
#1825
b100110 .
1'
#1850
0'
#1875
b100111 .
1'
#1900
0'
#1925
b101000 .
1'
#1950
0'
#1975
b101001 .
1'
#2000
0'
#2025
b101010 .
1'
#2050
0'
#2075
b101011 .
1'
#2100
0'
#2125
b101100 .
1'
#2150
0'
#2175
b101101 .
1'
#2200
0'
#2225
b101110 .
1'
#2250
0'
#2275
b101111 .
1'
#2300
0'
#2325
b110000 .
1'
#2350
0'
#2375
b110001 .
1'
#2400
0'
#2425
b110010 .
1'
#2450
0'
#2475
b110011 .
1'
#2500
0'
#2525
b110100 .
1'
#2550
0'
#2575
b110101 .
1'
#2600
0'
#2625
b110110 .
1'
#2650
0'
#2675
b110111 .
1'
#2700
0'
#2725
b111000 .
1'
#2750
0'
#2775
b111001 .
1'
#2800
0'
#2825
b111010 .
1'
#2850
0'
#2875
b111011 .
1'
#2900
0'
#2925
b111100 .
1'
#2950
0'
#2975
b111101 .
1'
#3000
0'
#3025
b111110 .
1'
#3050
0'
#3075
b111111 .
1'
#3100
0'
#3125
b1000000 .
1'
#3150
0'
#3175
b1000001 .
1'
#3200
0'
#3225
b1000010 .
1'
#3250
0'
#3275
b1000011 .
1'
#3300
0'
#3325
b1000100 .
1'
#3350
0'
#3375
b1000101 .
1'
#3400
0'
#3425
b1000110 .
1'
#3450
0'
#3475
b1000111 .
1'
#3500
0'
#3525
b1001000 .
1'
#3550
0'
#3575
b1001001 .
1'
#3600
0'
#3625
b1001010 .
1'
#3650
0'
#3675
b1001011 .
1'
#3700
0'
#3725
b1001100 .
1'
#3750
0'
#3775
b1001101 .
1'
#3800
0'
#3825
b1001110 .
1'
#3850
0'
#3875
b1001111 .
1'
#3900
0'
#3925
b1010000 .
1'
#3950
0'
#3975
b1010001 .
1'
#4000
0'
#4025
b1010010 .
1'
#4050
0'
#4075
b1010011 .
1'
#4100
0'
#4125
b1010100 .
1'
#4150
0'
#4175
b1010101 .
1'
#4200
0'
#4225
b1010110 .
1'
#4250
0'
#4275
b1010111 .
1'
#4300
0'
#4325
b1011000 .
1'
#4350
0'
#4375
b1011001 .
1'
#4400
0'
#4425
b1011010 .
1'
#4450
0'
#4475
b1011011 .
1'
#4500
0'
#4525
b1011100 .
1'
#4550
0'
#4575
b1011101 .
1'
#4600
0'
#4625
b1011110 .
1'
#4650
0'
#4675
b1011111 .
1'
#4700
0'
#4725
b1100000 .
1'
#4750
0'
#4775
b1100001 .
1'
#4800
0'
#4825
b1100010 .
1'
#4850
0'
#4875
b1100011 .
1'
#4900
0'
#4925
b1100100 .
1'
#4950
0'
#4975
b1100101 .
1'
#5000
0'
#5025
b1100110 .
1'
#5050
0'
#5075
b1100111 .
1'
#5100
0'
#5125
b1101000 .
1'
#5150
0'
#5175
b1101001 .
1'
#5200
0'
#5225
b1101010 .
1'
#5250
0'
#5275
b1101011 .
1'
#5300
0'
#5325
b1101100 .
1'
#5350
0'
#5375
b1101101 .
1'
#5400
0'
#5425
b1101110 .
1'
#5450
0'
#5475
b1101111 .
1'
#5500
0'
#5525
b1110000 .
1'
#5550
0'
#5575
b1110001 .
1'
#5600
0'
#5625
b1110010 .
1'
#5650
0'
#5675
b1110011 .
1'
#5700
0'
#5725
b1110100 .
1'
#5750
0'
#5775
b1110101 .
1'
#5800
0'
#5825
b1110110 .
1'
#5850
0'
#5875
b1110111 .
1'
#5900
0'
#5925
b1111000 .
1'
#5950
0'
#5975
b1111001 .
1'
#6000
0'
#6025
b1111010 .
1'
#6050
0'
#6075
b1111011 .
1'
#6100
0'
#6125
b1111100 .
1'
#6150
0'
#6175
b1111101 .
1'
#6200
0'
#6225
b1111110 .
1'
#6250
0'
#6275
b1111111 .
1'
#6300
0'
#6325
b10000000 .
1'
#6350
0'
#6375
b10000001 .
1'
#6400
0'
#6425
b10000010 .
1'
#6450
0'
#6475
b10000011 .
1'
#6500
0'
#6525
b10000100 .
1'
#6550
0'
#6575
b10000101 .
1'
#6600
0'
#6625
b10000110 .
1'
#6650
0'
#6675
b10000111 .
1'
#6700
0'
#6725
b10001000 .
1'
#6750
0'
#6775
b10001001 .
1'
#6800
0'
#6825
b10001010 .
1'
#6850
0'
#6875
b10001011 .
1'
#6900
0'
#6925
b10001100 .
1'
#6950
0'
#6975
b10001101 .
1'
#7000
0'
#7025
b10001110 .
1'
#7050
0'
#7075
b10001111 .
1'
#7100
0'
#7125
b10010000 .
1'
#7150
0'
#7175
b10010001 .
1'
#7200
0'
#7225
b10010010 .
1'
#7250
0'
#7275
b10010011 .
1'
#7300
0'
#7325
b10010100 .
1'
#7350
0'
#7375
b10010101 .
1'
#7400
0'
#7425
b10010110 .
1'
#7450
0'
#7475
b10010111 .
b11111 *
b11111 ,
b0 -
b100000 /
1'
#7500
0'
